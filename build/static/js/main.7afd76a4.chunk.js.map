{"version":3,"sources":["pages/cadastroProduto/index.js","pages/listaProduto/index.js","pages/carrinho/index.js","routes/index.js","utils/history.js","App.js","serviceWorker.js","index.js"],"names":["CadastroProduto","state","data","handleSendProduct","bind","products","this","props","history","push","pathname","search","list","className","initialValues","nameProduct","price","validationSchema","Yup","shape","required","min","onSubmit","fields","name","setState","alert","errors","touched","htmlFor","mask","type","component","onClick","Component","listProducts","productsSelected","navigationToCart","location","valueName","valuePrice","valueKey","key","fullCurrencyFormat","Intl","NumberFormat","style","currency","showList","map","item","format","handleAdd","Carrinho","order","orderResume","orderTotal","index","Number","orderTotalFormatted","Routes","path","exact","cadastroProduto","listaProduto","carrinho","createBrowserHistory","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7afd76a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { BiStore, BiDollar } from \"react-icons/bi\";\nimport \"./index.scss\";\nclass CadastroProduto extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n    };\n    this.handleSendProduct = this.handleSendProduct.bind(this);\n  }\n\n  handleSendProduct() {\n    let products = this.state.data;\n    this.props.history.push({\n      pathname: process.env.PUBLIC_URL + `/listaproduto`,\n      search: \"\",\n      list: { products },\n    });\n  }\n  render() {\n    return (\n      <div className={\"container\"}>\n        <h1> Cadastro de Produtos</h1>\n        <div className={\"content-home\"}>\n          <Formik\n            //\n            //Define os valores inicias de cada campo\n\n            initialValues={{\n              nameProduct: \"\",\n              price: \"\",\n            }}\n            //\n            //valida os campos obrigatórios\n\n            validationSchema={Yup.object().shape({\n              nameProduct: Yup.string().required(\"Nome do produto obrigatório\"),\n\n              price: Yup.string()\n                .min(2, \"O valor deve ser maior que 00,01\")\n                //.max(4, \"O valor não pode ser maior que 99,99\")\n                .required(\"O preço do produto é obrigatório\"),\n            })}\n            //\n            //Formata e envia os dados do formulario pro estado data\n\n            onSubmit={(fields) => {\n              let name = fields.nameProduct;\n              let price = fields.price;\n              this.setState({\n                data: [...this.state.data, { name: name, price: price }],\n              });\n\n              alert(\"Produto adicionado com sucesso\");\n            }}\n          >\n            {({ props, errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"nameProduct\">\n                    Nome do Produto <BiStore />\n                  </label>\n                  <Field\n                    mask={\"99/99\"}\n                    name=\"nameProduct\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.nameProduct && touched.nameProduct\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"nameProduct\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"price\">\n                    Preço do Produto <BiDollar />\n                  </label>\n                  <Field\n                    name=\"price\"\n                    type=\"number\"\n                    className={\n                      \"form-control\" +\n                      (errors.price && touched.price ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"price\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n\n                <div className=\"group-button\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Adicionar Produto\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Limpar\n                  </button>\n                  <div>\n                    <small>\n                      <a onClick={this.handleSendProduct}>\n                        Ir para lista de produtos\n                      </a>\n                    </small>\n                  </div>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CadastroProduto;\n","import React, { Component } from \"react\";\nimport { FaCartPlus } from \"react-icons/fa\";\nclass CadastroProduto extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      listProducts: \"\",\n      productsSelected: \"\",\n    };\n    this.navigationToCart = this.navigationToCart.bind(this);\n  }\n  componentDidMount() {\n    if (this.props.location.list) {\n      let products = this.props.location.list.products;\n      this.setState({\n        listProducts: products,\n      });\n    }\n  }\n\n  handleAdd(valueName, valuePrice, valueKey) {\n    let name = valueName;\n    let price = valuePrice;\n    let key = valueKey;\n\n    this.setState({\n      productsSelected: [\n        ...this.state.productsSelected,\n        { key: key, name: name, price: price },\n      ],\n    });\n\n    alert(\"Produto aticionado ao carrinho.\");\n  }\n  navigationToCart() {\n    let productsSelected = this.state.productsSelected;\n    this.props.history.push({\n      pathname: process.env.PUBLIC_URL + `/carrinho`,\n      search: \"\",\n      list: { productsSelected },\n    });\n  }\n\n  render() {\n    const locale = \"pt-BR\";\n    const currency = \"BRL\";\n    const fullCurrencyFormat = new Intl.NumberFormat(locale, {\n      style: \"currency\",\n      currency: currency,\n    });\n    let list = this.props.location.list.products;\n    if (list) {\n      var showList = list.map((item, key) => {\n        let price = fullCurrencyFormat.format(item.price);\n\n        return (\n          <li key={key}>\n            <div className=\"cards-item\">\n              <div className=\"cards-item-aligment\">\n                <span>{item.name}</span>\n                <small>{price}</small>\n              </div>\n              <small>\n                <a onClick={() => this.handleAdd(item.name, item.price, key)}>\n                  <FaCartPlus />\n                  Adicionar ao carrinho{\" \"}\n                </a>\n              </small>\n              <hr />\n            </div>\n          </li>\n        );\n      });\n    }\n    return (\n      <div className=\"container\">\n        <h1>Lista de Produtos</h1>\n        <div className=\"content\">\n          <ul>{showList}</ul>\n        </div>\n        <div>\n          <small>\n            <a onClick={this.navigationToCart}>Ir para o carrinho</a>\n          </small>\n        </div>\n      </div>\n    );\n  }\n}\nexport default CadastroProduto;\n","import React, { Component } from \"react\";\n\nclass Carrinho extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n    };\n  }\n  componentDidMount() {}\n\n  render() {\n    const locale = \"pt-BR\";\n    const currency = \"BRL\";\n    const fullCurrencyFormat = new Intl.NumberFormat(locale, {\n      style: \"currency\",\n      currency: currency,\n    });\n\n    var order = this.props.location.list.productsSelected;\n\n    if (order) {\n      var orderResume = order.map((item, key) => {\n        let price = fullCurrencyFormat.format(item.price);\n\n        return (\n          <li key={key}>\n            <div className=\"cards-item\">\n              <div className=\"cards-item-aligment\">\n                <span>{item.name}</span>\n                <small>{price}</small>\n                <br />\n              </div>\n            </div>\n          </li>\n        );\n      });\n    }\n    let orderTotal = 0;\n\n    //Função que faz o somatório de todos os valores\n    for (let index in order) {\n      let price = order[index].price;\n      orderTotal = Number(orderTotal) + Number(price);\n    }\n    const orderTotalFormatted = fullCurrencyFormat.format(orderTotal);\n    return (\n      <div className=\"container\">\n        <h1>Resumo do Pedido</h1>\n        <div className=\"content\">\n          <ul>{orderResume}</ul>\n          <div>\n            <div className=\"valueTotal\">\n              <h4> total</h4>\n              <span>{orderTotalFormatted}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carrinho;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport cadastroProduto from \"../pages/cadastroProduto\";\nimport listaProduto from \"../pages/listaProduto\";\nimport carrinho from \"../pages/carrinho\";\n\nexport default function Routes() {\n  return (\n    //navegação das paginas\n    <Switch>\n      <Route path=\"/\" exact component={cadastroProduto} />\n      <Route path=\"/cadastroproduto\" component={cadastroProduto} />\n      <Route path=\"/listaproduto\" component={listaProduto} />\n      <Route path=\"/carrinho\" component={carrinho} />\n    </Switch>\n  );\n}\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import React from \"react\";\nimport \"./style/common/layout.scss\";\nimport { Router } from \"react-router-dom\";\n\nimport Routes from \"./routes\";\nimport history from \"./utils/history\";\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Routes />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}